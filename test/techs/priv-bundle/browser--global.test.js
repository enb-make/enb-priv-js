var EOL = require('os').EOL,
    fs = require('fs'),
    path = require('path'),
    mock = require('mock-fs'),
    MockNode = require('mock-enb/lib/mock-node'),
    FileList = require('enb/lib/file-list'),
    Tech = require('../../../techs/priv-bundle'),
    htmlFilename = path.join(__dirname, '..', '..', 'fixtures', 'index.html'),
    mochaFilename = require.resolve('mocha/mocha.js'),
    chaiFilename = require.resolve('chai/chai.js'),
    runServer = require('../../lib/run-server');

describe('priv-bundle browser --global', function () {
    afterEach(function () {
        mock.restore();
    });

    it('compiled files should works on client-side', function () {
        var test = [
            'chai.should();',
            'it("autogenerated test", function () {',
            '    blocks.exec(\'block1\').should.equal(1);',
            '    blocks.exec(\'block2\').should.equal(2);',
            '})'
        ].join(EOL);

        return runTest(test);
    });

    describe('requires', function () {
        it('must get dependency from global scope using simple key', function () {
            var options = {
                    requires: {
                        depend: {
                            globals: 'depend'
                        }
                    }
                },
                lib = 'var depend = "Hello World";';

            return runTest(generateTest('Hello World'), options, generateTemplate(), lib);
        });

        it('must get dependency from global scope using dot-delimited key', function () {
            var options = {
                    requires: {
                        depend: {
                            globals: 'depend.key'
                        }
                    }
                },
                lib = 'var depend = { key: "Hello World" };';

            return runTest(generateTest('Hello World'), options, generateTemplate(), lib);
        });

        it('must get dependency from CommonJS', function () {
            var options = {
                    requires: {
                        fake: {
                            commonJS: 'fake'
                        }
                    }
                },
                template = [
                    'var fake = blocks.lib.fake;',
                    'module.exports = function (blocks) {',
                    '    blocks.declare("block1", function () { return fake.getText(); });',
                    '};'
                ].join(EOL);

            return runTest(generateTest('Hello World'), options, template);
        });

        it('must get dependency from global scope if it is still in CommonJS', function () {
            var options = {
                    requires: {
                        depend: {
                            globals: 'depend',
                            commonJS: 'depend'
                        }
                    }
                },
                lib = 'var depend = "globals";';

            return runTest(generateTest('globals'), options, generateTemplate(), lib);
        });
    });
});

function generateTest(expectedValue) {
    expectedValue = expectedValue || 'Hello World';
    return [
        'chai.should();',
        'it("autogenerated test", function () {',
        '    blocks.exec(\'block1\').should.equal("' + expectedValue + '");',
        '})'
    ].join(EOL);
}

function generateTemplate() {
    return [
        'module.exports = function (blocks) {',
        '    blocks.declare("block1", function () { return blocks.lib.depend; });',
        '};'
    ].join(EOL);
}

function runTest(testContent, options, template, lib) {
    var privJSCore = fs.readFileSync(require.resolve('priv-js/lib/priv.js')),
        bundle,
        fileList,

        scheme = {
            'index.html': fs.readFileSync(htmlFilename, 'utf-8'),
            'test.js': testContent,
            'mocha.js': fs.readFileSync(mochaFilename, 'utf-8'),
            'chai.js': fs.readFileSync(chaiFilename, 'utf-8'),
            'some-lib.js': lib || ''
        };

    scheme.bundle = {};

    scheme.blocks = {};
    scheme.blocks['block1.priv.js'] = template || [
        'module.exports = function (blocks) {',
        '    blocks.declare("block1", function () { return 1; });',
        '};'
    ].join(EOL);
    scheme.blocks['block2.priv.js'] = [
        'module.exports = function (blocks) {',
        '    blocks.declare("block2", function () { return 2; });',
        '};'
    ].join(EOL);

    // jscs:disable
    scheme['node_modules'] = {
        'priv-js': {
            lib: {
                'priv.js': privJSCore
            }
        },
        fake: {
            'index.js': 'module.exports = { getText: function () { return "Hello World"; } };'
        },
        depend: {
            'index.js': 'module.exports = "CommonJS";'
        }
    };
    // jscs:enable]
    mock(scheme);

    mock(scheme);

    bundle = new MockNode('bundle');
    fileList = new FileList();
    fileList.loadFromDirSync('blocks');
    bundle.provideTechData('?.files', fileList);

    return bundle.runTech(Tech, options)
        .then(function () {
            return runServer(3000);
        });
}
